{"version":3,"file":"react-netlify-identity.cjs.production.min.js","sources":["../src/token.ts","../src/runRoutes.tsx","../src/index.tsx"],"sourcesContent":["export type TokenParam = {\n  token: string | undefined;\n  type: 'invite' | 'recovery' | 'email_change' | undefined;\n  error: 'access_denied' | undefined;\n  status: 403 | undefined;\n};\n\nexport const defaultParam: TokenParam = {\n  token: undefined,\n  type: undefined,\n  error: undefined,\n  status: undefined,\n};\n","import GoTrue, { User } from 'gotrue-js';\nimport { TokenParam, defaultParam } from './token';\n\n/**\n * This code runs on every rerender so keep it light\n * keep checking the current route and do logic based on the route\n * as dictated by netlify identity's communication with us via hashes\n */\n\nconst routes = /(confirmation|invite|recovery|email_change|access)_token=([^&]+)/;\nconst errorRoute = /error=access_denied&error_description=403/;\n\nconst reduceHashToKeyValue = (hash: string): { [key: string]: string } =>\n  hash.split('&').reduce((carry, pair) => {\n    const [key, value] = pair.split('=');\n\n    return { ...carry, [key]: value };\n  }, {});\n\nconst hashReplace = /^#\\/?/;\n\nexport function runRoutes(\n  gotrue: GoTrue,\n  setUser: (value: User) => User | undefined,\n  remember = true\n): TokenParam {\n  // early terminate if no hash\n  // also accounts for document.cookie further down\n  if (!document?.location?.hash) {\n    return defaultParam;\n  }\n\n  const hash = document.location.hash.replace(hashReplace, '');\n\n  try {\n    history.pushState(\n      '',\n      document.title,\n      window.location.pathname + window.location.search\n    );\n  } catch (_) {\n    window.location.href.substr(0, window.location.href.indexOf('#'));\n  }\n\n  // earliest possible bail on any match\n  if (hash.match(errorRoute)) {\n    return {\n      ...defaultParam,\n      error: 'access_denied',\n      status: 403,\n    };\n  }\n\n  const matchesActionHashes = hash.match(routes);\n\n  if (matchesActionHashes) {\n    const params = reduceHashToKeyValue(hash);\n\n    if (params.confirmation_token) {\n      gotrue\n        .confirm(params.confirmation_token, remember)\n        .then(setUser)\n        .catch(console.error);\n\n      // dont notify dev as this package does not export its own method for this\n      return defaultParam;\n    }\n\n    if (params.access_token) {\n      document.cookie = `nf_jwt=${params.access_token}`;\n\n      gotrue\n        .createUser(params, remember)\n        .then(setUser)\n        .catch(console.error);\n\n      // also dont notify dev here for the same reasons as above\n      return defaultParam;\n    }\n\n    // pass responsibility to dev in all other cases\n    return {\n      ...defaultParam,\n      type: matchesActionHashes[1] as TokenParam['type'],\n      token: matchesActionHashes[2],\n    };\n  }\n\n  return defaultParam;\n}\n","import React, {\n  useState,\n  useMemo,\n  useEffect,\n  createContext,\n  useContext,\n  useCallback,\n  // types\n  ReactNode,\n} from 'react';\n\nimport GoTrue, {\n  User as GoTrueUser,\n  Settings as GoTrueSettings,\n} from 'gotrue-js';\nimport { runRoutes } from './runRoutes';\nimport { TokenParam, defaultParam } from './token';\n\ntype authChangeParam = (user?: User) => string | void;\n\nexport type Settings = GoTrueSettings;\nexport type User = GoTrueUser;\ntype Provider = 'bitbucket' | 'github' | 'gitlab' | 'google';\n\nconst defaultSettings = {\n  autoconfirm: false,\n  disable_signup: false,\n  external: {\n    bitbucket: false,\n    email: true,\n    facebook: false,\n    github: false,\n    gitlab: false,\n    google: false,\n  },\n};\n\nconst errors = {\n  noUserFound: 'No current user found - are you logged in?',\n  noUserTokenFound: 'no user token found',\n  tokenMissingOrInvalid: 'either no token found or invalid for this purpose',\n};\n\nexport type ReactNetlifyIdentityAPI = {\n  user: User | undefined;\n  /** not meant for normal use! you should mostly use one of the other exported methods to update the user instance */\n  setUser: (_user: GoTrueUser | undefined) => GoTrueUser | undefined;\n  isConfirmedUser: boolean;\n  isLoggedIn: boolean;\n  signupUser: (\n    email: string,\n    password: string,\n    data: Object,\n    directLogin?: boolean\n  ) => Promise<User | undefined>;\n  loginUser: (\n    email: string,\n    password: string,\n    remember?: boolean\n  ) => Promise<User | undefined>;\n  logoutUser: () => Promise<User | undefined>;\n  requestPasswordRecovery: (email: string) => Promise<void>;\n  recoverAccount: (remember?: boolean) => Promise<User | undefined>;\n  updateUser: (fields: object) => Promise<User | undefined>;\n  getFreshJWT: () => Promise<string> | undefined;\n  authedFetch: {\n    get: (endpoint: string, obj?: RequestInit) => Promise<any>;\n    post: (endpoint: string, obj?: RequestInit) => Promise<any>;\n    put: (endpoint: string, obj?: RequestInit) => Promise<any>;\n    delete: (endpoint: string, obj?: RequestInit) => Promise<any>;\n  };\n  _goTrueInstance: GoTrue;\n  _url: string;\n  loginProvider: (provider: Provider) => void;\n  acceptInviteExternalUrl: (\n    provider: Provider,\n    autoRedirect: boolean\n  ) => string | undefined;\n  settings: Settings;\n  param: TokenParam;\n  verifyToken: () => Promise<User | undefined>;\n};\n\nconst [_useIdentityContext, _IdentityCtxProvider] = createCtx<\n  ReactNetlifyIdentityAPI\n>();\nexport const useIdentityContext = _useIdentityContext; // we dont want to expose _IdentityCtxProvider\n\n/** most people should use this provider directly */\nexport function IdentityContextProvider({\n  url,\n  children,\n  onAuthChange = () => {},\n}: {\n  url: string;\n  children: ReactNode;\n  onAuthChange?: authChangeParam;\n}) {\n  /******** SETUP */\n  if (!url || !validateUrl(url)) {\n    // just a safety check in case a JS user tries to skip this\n    throw new Error(\n      'invalid netlify instance URL: ' +\n        url +\n        '. Please check the docs for proper usage or file an issue.'\n    );\n  }\n  const identity = useNetlifyIdentity(url, onAuthChange);\n  return (\n    <_IdentityCtxProvider value={identity}>{children}</_IdentityCtxProvider>\n  );\n}\n\n/** some people may want to use this as a hook and bring their own contexts */\nexport function useNetlifyIdentity(\n  url: string,\n  onAuthChange: authChangeParam = () => {},\n  enableRunRoutes: boolean = true\n): ReactNetlifyIdentityAPI {\n  const goTrueInstance = useMemo(\n    () =>\n      new GoTrue({\n        APIUrl: `${url}/.netlify/identity`,\n        setCookie: true,\n      }),\n    [url]\n  );\n\n  /******* STATE and EFFECTS */\n\n  const [user, setUser] = useState<User | undefined>(\n    goTrueInstance.currentUser() || undefined\n  );\n\n  const _setUser = useCallback(\n    (_user: User | undefined) => {\n      setUser(_user);\n      onAuthChange(_user); // if someone's subscribed to auth changes, let 'em know\n      return _user; // so that we can continue chaining\n    },\n    [onAuthChange]\n  );\n\n  const [param, setParam] = useState<TokenParam>(defaultParam);\n\n  useEffect(() => {\n    if (enableRunRoutes) {\n      const param = runRoutes(goTrueInstance, _setUser);\n\n      if (param.token || param.error) {\n        setParam(param);\n      }\n    }\n  }, []);\n\n  const [settings, setSettings] = useState<Settings>(defaultSettings);\n\n  useEffect(() => {\n    goTrueInstance.settings\n      .bind(goTrueInstance)()\n      .then(x => setSettings(x));\n  }, []);\n\n  /******* OPERATIONS */\n  // make sure the Registration preferences under Identity settings in your Netlify dashboard are set to Open.\n  // https://react-netlify-identity.netlify.com/login#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTY0ODY3MjEsInN1YiI6ImNiZjY5MTZlLTNlZGYtNGFkNS1iOTYzLTQ4ZTY2NDcyMDkxNyIsImVtYWlsIjoic2hhd250aGUxQGdtYWlsLmNvbSIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImdpdGh1YiJ9LCJ1c2VyX21ldGFkYXRhIjp7ImF2YXRhcl91cmwiOiJodHRwczovL2F2YXRhcnMxLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzY3NjQ5NTc_dj00IiwiZnVsbF9uYW1lIjoic3d5eCJ9fQ.E8RrnuCcqq-mLi1_Q5WHJ-9THIdQ3ha1mePBKGhudM0&expires_in=3600&refresh_token=OyA_EdRc7WOIVhY7RiRw5w&token_type=bearer\n  /******* external oauth */\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L71\n   */\n  const loginProvider = useCallback(\n    (provider: Provider) => {\n      const url = goTrueInstance.loginExternalUrl(provider);\n      window.location.href = url;\n    },\n    [goTrueInstance]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L92\n   */\n  const acceptInviteExternalUrl = useCallback(\n    (provider: Provider, autoRedirect: boolean = true) => {\n      if (!param.token || param.type !== 'invite') {\n        console.error(errors.tokenMissingOrInvalid);\n        return;\n      }\n\n      const url = goTrueInstance.acceptInviteExternalUrl(provider, param.token);\n      // clean up consumed token\n      setParam(defaultParam);\n\n      if (autoRedirect) {\n        window.location.href = url;\n        return;\n      }\n\n      return url;\n    },\n    [goTrueInstance, param]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L123\n   */\n  const verifyToken = useCallback(() => {\n    if (!param.type || !param.token) {\n      return Promise.reject(errors.tokenMissingOrInvalid);\n    }\n\n    return goTrueInstance.verify(param.type, param.token).then(user => {\n      // cleanup consumed token\n      setParam(defaultParam);\n\n      return user;\n    });\n  }, [goTrueInstance, param]);\n\n  /******* email auth */\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L50\n   */\n  const signupUser = useCallback(\n    (\n      email: string,\n      password: string,\n      data: Object,\n      directLogin: boolean = true\n    ) =>\n      goTrueInstance.signup(email, password, data).then(user => {\n        if (directLogin) {\n          return _setUser(user);\n        }\n\n        return user;\n      }),\n    [goTrueInstance, _setUser]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L57\n   */\n  const loginUser = useCallback(\n    (email: string, password: string, remember: boolean = true) =>\n      goTrueInstance.login(email, password, remember).then(_setUser),\n    [goTrueInstance, _setUser]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L80\n   */\n  const requestPasswordRecovery = useCallback(\n    (email: string) => goTrueInstance.requestPasswordRecovery(email),\n    [goTrueInstance]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/index.js#L87\n   */\n  const recoverAccount = useCallback(\n    (remember?: boolean) => {\n      if (!param.token || param.type !== 'recovery') {\n        return Promise.reject(errors.tokenMissingOrInvalid);\n      }\n\n      return goTrueInstance\n        .recover(param.token, remember)\n        .then(user => {\n          return _setUser(user);\n        })\n        .finally(() => {\n          // clean up consumed token\n          setParam(defaultParam);\n        });\n    },\n    [goTrueInstance, _setUser, param]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/user.js#L54\n   */\n  const updateUser = useCallback(\n    (fields: object) => {\n      if (!user) {\n        return Promise.reject(errors.noUserFound);\n      }\n\n      return user!\n        .update(fields) // e.g. { email: \"example@example.com\", password: \"password\" }\n        .then(_setUser);\n    },\n    [user]\n  );\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/user.js#L63\n   */\n  const getFreshJWT = useCallback(() => {\n    if (!user) {\n      return Promise.reject(errors.noUserFound);\n    }\n\n    return user.jwt();\n  }, [user]);\n\n  /**\n   * @see https://github.com/netlify/gotrue-js/blob/master/src/user.js#L71\n   */\n  const logoutUser = useCallback(() => {\n    if (!user) {\n      return Promise.reject(errors.noUserFound);\n    }\n\n    return user.logout().then(() => _setUser(undefined));\n  }, [user]);\n\n  const genericAuthedFetch = (method: RequestInit['method']) => (\n    endpoint: string,\n    options: RequestInit = {}\n  ) => {\n    if (!user?.token?.access_token) {\n      return Promise.reject(errors.noUserTokenFound);\n    }\n\n    const defaultObj = {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + user.token.access_token,\n      },\n    };\n    const finalObj = Object.assign(defaultObj, { method }, options);\n\n    return fetch(endpoint, finalObj).then(res =>\n      finalObj.headers['Content-Type'] === 'application/json' ? res.json() : res\n    );\n  };\n\n  const authedFetch = {\n    get: genericAuthedFetch('GET'),\n    post: genericAuthedFetch('POST'),\n    put: genericAuthedFetch('PUT'),\n    delete: genericAuthedFetch('DELETE'),\n  };\n\n  /******* hook API */\n  return {\n    user,\n    /** not meant for normal use! you should mostly use one of the other exported methods to update the user instance */\n    setUser: _setUser,\n    isConfirmedUser: !!(user && user.confirmed_at),\n    isLoggedIn: !!user,\n    signupUser,\n    loginUser,\n    logoutUser,\n    requestPasswordRecovery,\n    recoverAccount,\n    updateUser,\n    getFreshJWT,\n    authedFetch,\n    _goTrueInstance: goTrueInstance,\n    _url: url,\n    loginProvider,\n    acceptInviteExternalUrl,\n    settings,\n    param,\n    verifyToken,\n  };\n}\n\n/**\n *\n *\n * Utils\n *\n */\n\nfunction validateUrl(value: string) {\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(\n    value\n  );\n}\n\n// lazy initialize contexts without providing a Nullable type upfront\nfunction createCtx<A>() {\n  const ctx = createContext<A | undefined>(undefined);\n  function useCtx() {\n    const c = useContext(ctx);\n    if (!c) throw new Error('useCtx must be inside a Provider with a value');\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const;\n}\n\n// // Deprecated for now\n// interface NIProps {\n//   children: any\n//   url: string\n//   onAuthChange?: authChangeParam\n// }\n// export default function NetlifyIdentity({ children, url, onAuthChange }: NIProps) {\n//   return children(useNetlifyIdentity(url, onAuthChange))\n// }\n"],"names":["defaultParam","token","undefined","type","error","status","routes","errorRoute","hashReplace","defaultSettings","autoconfirm","disable_signup","external","bitbucket","email","facebook","github","gitlab","google","errors","createCtx","_IdentityCtxProvider","useIdentityContext","useNetlifyIdentity","url","onAuthChange","enableRunRoutes","goTrueInstance","useMemo","GoTrue","APIUrl","setCookie","useState","currentUser","user","setUser","_setUser","useCallback","_user","param","setParam","useEffect","gotrue","remember","document","_document","location","_document$location","hash","replace","history","pushState","title","window","pathname","search","_","href","substr","indexOf","match","matchesActionHashes","params","split","reduce","carry","pair","reduceHashToKeyValue","confirmation_token","confirm","then","console","access_token","cookie","createUser","runRoutes","settings","setSettings","bind","x","loginProvider","provider","loginExternalUrl","acceptInviteExternalUrl","autoRedirect","verifyToken","verify","Promise","reject","signupUser","password","data","directLogin","signup","loginUser","login","requestPasswordRecovery","recoverAccount","recover","updateUser","fields","update","getFreshJWT","jwt","logoutUser","logout","genericAuthedFetch","method","endpoint","options","_user$token","finalObj","Object","assign","headers","Accept","Authorization","fetch","res","json","authedFetch","get","post","put","isConfirmedUser","confirmed_at","isLoggedIn","_goTrueInstance","_url","ctx","createContext","c","useContext","Error","Provider","children","test","identity","React","value"],"mappings":"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"}